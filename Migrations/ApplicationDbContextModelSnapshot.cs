// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ruddy.WEB.DataAccess;

#nullable disable

namespace Ruddy.WEB.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("bulkModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("dishIdBeforeBulk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("bulkModels");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ruddy.WEB.Models.AlternativeIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AltIngredientId")
                        .HasColumnType("int");

                    b.Property<int>("MainIngredientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainIngredientId");

                    b.ToTable("AlternativeIngredients");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Coupons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CouponId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.CraftedComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameFr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameNl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantUserId");

                    b.ToTable("CraftedComponents");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.CraftedComponentIngridient", b =>
                {
                    b.Property<int>("CraftedComponentId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("CraftedComponentId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("CraftedComponentIngridient");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.DietaryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Dietary")
                        .HasColumnType("int");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.ToTable("DietaryTypes");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.DiscountDish", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.HasKey("DiscountId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("DiscountDish");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.DishCategory", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("DishId", "SubCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("DishCategories");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.DishComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientType")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SubstituteGroup")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("IngredientId");

                    b.ToTable("DishComponents");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.FcmTokens", b =>
                {
                    b.Property<string>("FcmToken")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FcmToken");

                    b.HasIndex("AccountId");

                    b.ToTable("FcmTokens");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FriendAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId1");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double?>("Alcohol_G")
                        .HasColumnType("float");

                    b.Property<double?>("Calcium_MG")
                        .HasColumnType("float");

                    b.Property<double?>("Carbohydrates_G")
                        .HasColumnType("float");

                    b.Property<double?>("Cholesterol_MG")
                        .HasColumnType("float");

                    b.Property<double?>("Copper_MG")
                        .HasColumnType("float");

                    b.Property<int?>("CraftedComponentId")
                        .HasColumnType("int");

                    b.Property<double?>("Energy_KCal")
                        .HasColumnType("float");

                    b.Property<double?>("Energy_Kj")
                        .HasColumnType("float");

                    b.Property<double?>("FA_C12_0_G")
                        .HasColumnType("float");

                    b.Property<double?>("FA_C14_0_G")
                        .HasColumnType("float");

                    b.Property<double?>("FA_C16_0_G")
                        .HasColumnType("float");

                    b.Property<double?>("FA_C18_2_n_6_cis_linoleic_G")
                        .HasColumnType("float");

                    b.Property<double?>("FA_C18_3_n_3_cis_linolenic_G")
                        .HasColumnType("float");

                    b.Property<double?>("FA_C20_5_n_3_cis_EPA_G")
                        .HasColumnType("float");

                    b.Property<double?>("FA_C22_6_n_3_cis_DHA_G")
                        .HasColumnType("float");

                    b.Property<double?>("FA_monounsat_sum_G")
                        .HasColumnType("float");

                    b.Property<double?>("FA_omega_3_sum_G")
                        .HasColumnType("float");

                    b.Property<double?>("FA_omega_6_sum_G")
                        .HasColumnType("float");

                    b.Property<double?>("FA_polyunsat_sum_G")
                        .HasColumnType("float");

                    b.Property<double?>("FA_trans_sum_G")
                        .HasColumnType("float");

                    b.Property<double?>("Fat_G")
                        .HasColumnType("float");

                    b.Property<double?>("FattyAcidsSaturated_G")
                        .HasColumnType("float");

                    b.Property<double?>("FibresSum_G")
                        .HasColumnType("float");

                    b.Property<double?>("Folate_MCG")
                        .HasColumnType("float");

                    b.Property<double?>("Fructose_G")
                        .HasColumnType("float");

                    b.Property<double?>("GaLactose_G")
                        .HasColumnType("float");

                    b.Property<double?>("Glucose_G")
                        .HasColumnType("float");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Iodide_MG")
                        .HasColumnType("float");

                    b.Property<double?>("Iron_MG")
                        .HasColumnType("float");

                    b.Property<double?>("Lactose_G")
                        .HasColumnType("float");

                    b.Property<double?>("Magnesium_MG")
                        .HasColumnType("float");

                    b.Property<double?>("Maltose_G")
                        .HasColumnType("float");

                    b.Property<string>("NameEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameFr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameNl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Phosphorus_MG")
                        .HasColumnType("float");

                    b.Property<double?>("Polyols_sum_G")
                        .HasColumnType("float");

                    b.Property<double?>("Potassium_MG")
                        .HasColumnType("float");

                    b.Property<double?>("Proteins_G")
                        .HasColumnType("float");

                    b.Property<double?>("Selenium_MCG")
                        .HasColumnType("float");

                    b.Property<double?>("Sodium_MG")
                        .HasColumnType("float");

                    b.Property<double?>("Starch_G")
                        .HasColumnType("float");

                    b.Property<string>("SubGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Sucrose_G")
                        .HasColumnType("float");

                    b.Property<double?>("Sugars_G")
                        .HasColumnType("float");

                    b.Property<double?>("VitA_Activity_MCG")
                        .HasColumnType("float");

                    b.Property<double?>("VitB12_MCG")
                        .HasColumnType("float");

                    b.Property<double?>("VitB1_MG")
                        .HasColumnType("float");

                    b.Property<double?>("VitB2_MG")
                        .HasColumnType("float");

                    b.Property<double?>("VitC_MG")
                        .HasColumnType("float");

                    b.Property<double?>("VitD_MCG")
                        .HasColumnType("float");

                    b.Property<double?>("VitE_MG")
                        .HasColumnType("float");

                    b.Property<double?>("Water_G")
                        .HasColumnType("float");

                    b.Property<double?>("Zinc_MG")
                        .HasColumnType("float");

                    b.Property<int>("isChainInsertedByAdmin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CraftedComponentId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.ItemСharacteristics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Alcohol_G")
                        .HasColumnType("float");

                    b.Property<double>("Calcium_MG")
                        .HasColumnType("float");

                    b.Property<double>("Carbohydrates_G")
                        .HasColumnType("float");

                    b.Property<double>("Cholesterol_MG")
                        .HasColumnType("float");

                    b.Property<double>("Copper_MG")
                        .HasColumnType("float");

                    b.Property<double>("Energy_KCal")
                        .HasColumnType("float");

                    b.Property<double>("Energy_Kj")
                        .HasColumnType("float");

                    b.Property<double>("FA_C12_0_G")
                        .HasColumnType("float");

                    b.Property<double>("FA_C14_0_G")
                        .HasColumnType("float");

                    b.Property<double>("FA_C16_0_G")
                        .HasColumnType("float");

                    b.Property<double>("FA_C18_2_n_6_cis_linoleic_G")
                        .HasColumnType("float");

                    b.Property<double>("FA_C18_3_n_3_cis_linolenic_G")
                        .HasColumnType("float");

                    b.Property<double>("FA_C20_5_n_3_cis_EPA_G")
                        .HasColumnType("float");

                    b.Property<double>("FA_C22_6_n_3_cis_DHA_G")
                        .HasColumnType("float");

                    b.Property<double>("FA_monounsat_sum_G")
                        .HasColumnType("float");

                    b.Property<double>("FA_omega_3_sum_G")
                        .HasColumnType("float");

                    b.Property<double>("FA_omega_6_sum_G")
                        .HasColumnType("float");

                    b.Property<double>("FA_polyunsat_sum_G")
                        .HasColumnType("float");

                    b.Property<double>("FA_trans_sum_G")
                        .HasColumnType("float");

                    b.Property<double>("Fat_G")
                        .HasColumnType("float");

                    b.Property<double>("FattyAcidsSaturated_G")
                        .HasColumnType("float");

                    b.Property<double>("FibresSum_G")
                        .HasColumnType("float");

                    b.Property<double>("Folate_MCG")
                        .HasColumnType("float");

                    b.Property<double>("Fructose_G")
                        .HasColumnType("float");

                    b.Property<double>("GaLactose_G")
                        .HasColumnType("float");

                    b.Property<double>("Glucose_G")
                        .HasColumnType("float");

                    b.Property<double>("Iodide_MG")
                        .HasColumnType("float");

                    b.Property<double>("Iron_MG")
                        .HasColumnType("float");

                    b.Property<double>("Lactose_G")
                        .HasColumnType("float");

                    b.Property<double>("Magnesium_MG")
                        .HasColumnType("float");

                    b.Property<double>("Maltose_G")
                        .HasColumnType("float");

                    b.Property<double>("Phosphorus_MG")
                        .HasColumnType("float");

                    b.Property<double>("Polyols_sum_G")
                        .HasColumnType("float");

                    b.Property<double>("Potassium_MG")
                        .HasColumnType("float");

                    b.Property<double>("Proteins_G")
                        .HasColumnType("float");

                    b.Property<double>("Selenium_MCG")
                        .HasColumnType("float");

                    b.Property<double>("Sodium_MG")
                        .HasColumnType("float");

                    b.Property<double>("Starch_G")
                        .HasColumnType("float");

                    b.Property<double>("Sucrose_G")
                        .HasColumnType("float");

                    b.Property<double>("Sugars_G")
                        .HasColumnType("float");

                    b.Property<double>("VitA_Activity_MCG")
                        .HasColumnType("float");

                    b.Property<double>("VitB12_MCG")
                        .HasColumnType("float");

                    b.Property<double>("VitB1_MG")
                        .HasColumnType("float");

                    b.Property<double>("VitB2_MG")
                        .HasColumnType("float");

                    b.Property<double>("VitC_MG")
                        .HasColumnType("float");

                    b.Property<double>("VitD_MCG")
                        .HasColumnType("float");

                    b.Property<double>("VitE_MG")
                        .HasColumnType("float");

                    b.Property<double>("Water_G")
                        .HasColumnType("float");

                    b.Property<double>("Zinc_MG")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ItemСharacteristics");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<bool>("IsPromotional")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("PromotionalPrice")
                        .HasColumnType("float");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MenuItems");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MenuItem");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaymentSuccess")
                        .HasColumnType("bit");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfPayment")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.OrderedIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("IngredientNameEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IngredientNameEs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IngredientNameFr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IngredientNameNl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IngredientType")
                        .HasColumnType("int");

                    b.Property<int?>("OrderedItemId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderedItemId");

                    b.ToTable("OrderedIngredients");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.OrderedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemСharacteristicsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double?>("PromotionalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ItemСharacteristicsId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderedItems");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Pause", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("PauseEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PauseStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TimeId");

                    b.ToTable("Pauses");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAddByAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnofficialRestaurant")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantCategory")
                        .HasColumnType("int");

                    b.Property<string>("RestaurantUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecondPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VAT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Whatsapp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("adminRestaurantIncludeMenu")
                        .HasColumnType("bit");

                    b.Property<string>("chainCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantUserId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.RestaurantRecievers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FcmTokensFcmToken")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FcmTokensFcmToken");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantRecievers");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Time", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ClosingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<DateTime>("OpeningTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Times");
                });

            modelBuilder.Entity("SPModel", b =>
                {
                    b.Property<int?>("Dietary")
                        .HasColumnType("int");

                    b.Property<int?>("DishId")
                        .HasColumnType("int");

                    b.Property<int?>("DishType")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int?>("compNumber")
                        .HasColumnType("int");

                    b.Property<int?>("mainEnergy")
                        .HasColumnType("int");

                    b.ToTable("SpModels");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Account", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConnectedAccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerAccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Account");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Dish", b =>
                {
                    b.HasBaseType("Ruddy.WEB.Models.MenuItem");

                    b.Property<int>("DishType")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<int>("isChainInsertedByAdmin")
                        .HasColumnType("int");

                    b.HasIndex("RestaurantId");

                    b.HasDiscriminator().HasValue("Dish");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Ruddy.WEB.Models.Account");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<int>("LevelOfActivity")
                        .HasColumnType("int");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.RestaurantUser", b =>
                {
                    b.HasBaseType("Ruddy.WEB.Models.Account");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsStripeAccountCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("RestaurantUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ruddy.WEB.Models.AlternativeIngredient", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.Ingredient", "MainIngredient")
                        .WithMany()
                        .HasForeignKey("MainIngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainIngredient");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Coupons", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.CraftedComponent", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.RestaurantUser", "RestaurantUser")
                        .WithMany()
                        .HasForeignKey("RestaurantUserId");

                    b.Navigation("RestaurantUser");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.CraftedComponentIngridient", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.CraftedComponent", "CraftedComponent")
                        .WithMany("CraftedComponentIngridients")
                        .HasForeignKey("CraftedComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ruddy.WEB.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CraftedComponent");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.DietaryType", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.Dish", null)
                        .WithMany("DietaryType")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ruddy.WEB.Models.DiscountDish", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.Discount", "Discount")
                        .WithMany("DiscountDishes")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ruddy.WEB.Models.Dish", "Dish")
                        .WithMany("DiscountDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.DishCategory", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.Dish", "Dish")
                        .WithMany("DishCategories")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ruddy.WEB.Models.SubCategory", "SubCategory")
                        .WithMany("DishCategories")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.DishComponent", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.Dish", null)
                        .WithMany("Components")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ruddy.WEB.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.FcmTokens", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Friend", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Friends")
                        .HasForeignKey("ApplicationUserId1");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Ingredient", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.CraftedComponent", "CraftedComponent")
                        .WithMany()
                        .HasForeignKey("CraftedComponentId");

                    b.Navigation("CraftedComponent");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Order", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Ruddy.WEB.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.OrderedIngredient", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.OrderedItem", null)
                        .WithMany("OrderedIngredients")
                        .HasForeignKey("OrderedItemId");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.OrderedItem", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.ItemСharacteristics", "ItemСharacteristics")
                        .WithMany()
                        .HasForeignKey("ItemСharacteristicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ruddy.WEB.Models.Order", null)
                        .WithMany("OrderedItems")
                        .HasForeignKey("OrderId");

                    b.Navigation("ItemСharacteristics");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Pause", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.Time", "Time")
                        .WithMany("Pauses")
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Time");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Restaurant", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.RestaurantUser", "RestaurantUser")
                        .WithMany("Restaurants")
                        .HasForeignKey("RestaurantUserId");

                    b.Navigation("RestaurantUser");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.RestaurantRecievers", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.FcmTokens", null)
                        .WithMany("RestaurantRecievers")
                        .HasForeignKey("FcmTokensFcmToken");

                    b.HasOne("Ruddy.WEB.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.SubCategory", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.Restaurant", "Restaurant")
                        .WithMany("Menu")
                        .HasForeignKey("RestaurantId");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Time", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.Restaurant", "Restaurant")
                        .WithMany("Times")
                        .HasForeignKey("RestaurantId");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Dish", b =>
                {
                    b.HasOne("Ruddy.WEB.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.CraftedComponent", b =>
                {
                    b.Navigation("CraftedComponentIngridients");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Discount", b =>
                {
                    b.Navigation("DiscountDishes");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.FcmTokens", b =>
                {
                    b.Navigation("RestaurantRecievers");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Order", b =>
                {
                    b.Navigation("OrderedItems");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.OrderedItem", b =>
                {
                    b.Navigation("OrderedIngredients");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Restaurant", b =>
                {
                    b.Navigation("Menu");

                    b.Navigation("Times");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.SubCategory", b =>
                {
                    b.Navigation("DishCategories");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Time", b =>
                {
                    b.Navigation("Pauses");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.Dish", b =>
                {
                    b.Navigation("Components");

                    b.Navigation("DietaryType");

                    b.Navigation("DiscountDishes");

                    b.Navigation("DishCategories");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.ApplicationUser", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Ruddy.WEB.Models.RestaurantUser", b =>
                {
                    b.Navigation("Restaurants");
                });
#pragma warning restore 612, 618
        }
    }
}
